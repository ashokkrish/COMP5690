save.image("~/MRU/rstudio cougarstats.RData")
load("~/MRU/rstudio cougarstats.RData")
shiny::runApp('MRU/CougarStats')
runApp('MRU/CougarStats')
runApp('MRU/CougarStats')
runApp('MRU/CougarStats')
runApp('MRU/CougarStats')
load("~/MRU/R Practice/firstTest.R")
#test
5 + 6
a <- 5
b <- 6
a + b
sum(a+b)
ages <- c(a,b)
ages <- c(a,b)
ages
sum(ages)
sum(ages)
a <- 10
b <- 3
sum(ages)
ages <- c(a,b)
sum(ages)
sum(ages)
b <- 3
sum(ages)
sum(ages)
sum(ages)
a <- 11
b <- 3
ages <- c(a,b)
sum(ages)
a <- 10
sum(ages)
#test
5 + 6
a <- 10
b <- 3
a + b
sum(a+b)
ages <- c(a,b)
ages
sum(ages)
names <- c("John", "James")
friends <- data.frame(names, ages)
View(friends)
view(friends)
5 + 6
a <- 10
b <- 3
a + b
sum(a+b)
ages <- c(a,b)
ages
sum(ages)
names <- c("John", "James")
friends <- data.frame(names, ages)
view(friends)
library(utils)
view(friends)
friends <- data.frame(names, ages)
names <- c("John", "James")
view(friends)
## Creating Tables ----
table(msleep$vore)
# Basics: objects, concatenations, dataframes ----
5 + 6
a <- 10              # save 10 in an object 'a'
b <- 3
a + b
sum(a+b)
ages <- c(a,b)       # concatenate a and b, save in object ages
ages
sum(ages)
names <- c("John", "James")
friends <- data.frame(names, ages)  # create new data frame
View(friends)                       # View the table thing
str(friends)                        # structure of friends
friends$ages         # look at variables of ages
friends$names        # look at variables of names
friends[1,1]         # display the observation/record? at this position [row,col]
friends[1, ]         # display all columns at row 1
friends[ ,1]         # display all rows at column 1
# Built in data sets for practice  ----
## Star Wars  ----
install.packages("tidyverse")
library(tidyverse)
data()
View(starwars)
starwars %>%         # pipe operator (shift+ctrl+M). Means "and then"
filter(height > 150 & mass < 200) %>% # filter observations
mutate(height_in_meters = height/100) %>%
select(height_in_meters, mass) %>%    # select column, like in SQL
arrange(mass) %>%
View()
# Data structure and types of variables
## Mammalian Sleep ----
View(msleep)
glimpse(msleep)      # much like str(friends). view the structure of the data
head(msleep)         # displays first 6 rows in console
class(msleep$name)   # what is the type class of the name variable in the msleep dataset?
length(msleep)       # how many variables (columns) in msleep
length(msleep$name)  # how many observations of this variable
names(msleep)        # all variables in msleep
unique(msleep$vore)  # all unique observations of this variable
missing <- !complete.cases(msleep) # complete gives rows where all variables are filled
# !complete can be saved in missing
msleep[missing, ]    # display all columns of the missing rows
## Clean ----
starwars %>%
select(name, height, mass)
starwars %>%         # select columns 1-3
select(1:3)
starwars %>%
select(ends_with("color"))
starwars %>%         # switch order of columns
select(name, mass, height, everything()) %>%   # everything() = everything else
View()
starwars %>%         # rename a variable
rename("characters" = "name") %>%
head()
class(starwars$hair_color)
starwars$hair_color <- as.factor(starwars$hair_color)  # change type to factor
class(starwars$hair_color)
starwars %>%
mutate(hair_color = as.character(hair_color)) %>%    # change back to char
glimpse()
## Changing factor levels ----
df <- starwars
df$sex <- as.factor(df$sex)
levels(df$sex)      # similar to using unique(). returns in alphabetical order
df <- df %>%        # change the order of levels
mutate(sex = factor(sex, levels = c("male", "female", "hermaphroditic", "none"))) %>%
glimpse()
levels(df$sex)      # changed. levels are categories (only in factors) within that variable
## Filter rows ----
starwars %>%
select(mass, sex) %>%
filter(mass < 55 & sex == "female")
## Recode data ----
starwars %>%        # change words in records
select(sex) %>%
mutate(sex = recode(sex, "male" = "man", "female" = "woman"))
## Dealing with missing data ----
mean(starwars$height)                  # doesn't work bc of missing data
mean(starwars$height, na.rm = TRUE)    # remove NA values
## Dealing with duplicates ----
Names <- c("Peter", "John", "Andrew", "Peter")
Age <- c(22, 33, 44, 22)
Friends <- data.frame(Names, Age)
Friends
Friends %>%        # displays distinct records (doesn't alter dataframe itself)
distinct()       # same as distinct(Friends) by itself
## Manipulating data----
starwars %>%
mutate(height_m = height/100) %>%
select(name, height, height_m)
## Conditional change (if_else) ----
starwars %>%
mutate(height_m = height/100) %>%
select(name, height, height_m) %>%
mutate(tallness = if_else(height_m < 1, "short", "tall"))
# Pivot ----
## Reshape data with Pivot wider----
library(gapminder)
View(gapminder)
data <- select(gapminder, country, year, lifeExp)  # select from gapminder as first arg
View(data)
wide_data <- data %>%
pivot_wider(names_from = year, values_from = lifeExp)  # first arg is variables, second arg is values
View(wide_data)
## Reshape data with Pivot longer ----
long_data <- wide_data %>%
pivot_longer(2:13, names_to = "year", values_to = "lifeExp")  # first arg is columns to be changed, second and third are variables to be made
View(long_data)
# Describing data ----
## Range / spread ----
min(msleep$awake)
max(msleep$awake)
range(msleep$awake)
IQR(msleep$awake)
## Centrality  ----
mean(msleep$awake)
median(msleep$awake)
## Variance ----
var(msleep$awake)
## Summary ----
summary(msleep$awake)  # gives min, max, mean, median, IQR
msleep %>%             # summarize more variables
select(awake, sleep_total) %>%
summary()
# Longer Summarize Practice  ----
## Mammalian Sleep  ----
msleep %>%
drop_na(vore) %>%       # drop missing values
group_by(vore) %>%      # group by vore categories
summarise(Lower = min(sleep_total),
Average = mean(sleep_total),
Upper = max(sleep_total),
Difference = Upper - Lower) %>%
arrange(Average) %>%
View()
## Creating Tables ----
table(msleep$vore)
## Creating Tables ----
table(msleep$vore)
# Data structure and types of variables
## Mammalian Sleep ----
library(msleep)
library(tidyverse)
data()
## Creating Tables ----
table(msleep$vore)
msleep %>%
select(vore, order) %>%
filter(order %in% c("Rodentia", "Primates")) %>%
table()
plot(pressure)
## The Grammar of Graphics (data, mapping, geometry) ----
### Bar plots ----
ggplot(data = starwars, mapping = aes(x = gender)) + geom_bar()
## The Grammar of Graphics (data, mapping, geometry) ----
### Bar plots ----
ggplot(data = starwars,
mapping = aes(x = gender)) +    # isntead of %>% , add geometry (bar plot)
geom_bar()
### Histograms ----
starwars %>%
drop_na(height) %>%
ggplot(mapping = aes(x = height)) +
geom_histogram()
### Box Plots ----
starwars %>%
drop_na(height) %>%
ggplot(aes(height)) +               # both "mapping =" and "x =" are assumed by default
geom_boxplot(fill = "steelblue") +
theme_bw() +                        # built-in themes
labs(title = "Boxplot of height",   # labels
x = "Height of characters")
filter(sex %in% c("male, "female"))
source("~/MRU/R Practice/firstTest.R", echo=TRUE)
### Density Plots ----
starwars %>%
drop_na(height) %>%
filter(sex %in% c("male", "female")) %>%
ggplot(aes(x = height,
color = sex,        # color of lines
fill = sex)) +
geom_density(alpha = 0.2) +
theme_bw()
### Scatter Plots ----
starwars %>%
filter(mass < 200) %>%
ggplot(aes(height,             # first arg assumed to be x
mass,               # second arg assumed to be y
color = sex)) +     # color mapped against sex
geom_point(size = 5, alpha = 0.5) +      # size = size of points
theme_bw() +
labs(title = "Height and mass by sex")
### Scatter Plots ----
starwars %>%
filter(mass < 200) %>%
ggplot(aes(height,             # first arg assumed to be x
mass,               # second arg assumed to be y
color = sex)) +     # color mapped against sex
geom_point(size = 5, alpha = 0.5) +      # size = size of points
theme_min() +
labs(title = "Height and mass by sex")
### Scatter Plots ----
starwars %>%
filter(mass < 200) %>%
ggplot(aes(height,             # first arg assumed to be x
mass,               # second arg assumed to be y
color = sex)) +     # color mapped against sex
geom_point(size = 5, alpha = 0.5) +      # size = size of points
theme_minimal() +
labs(title = "Height and mass by sex")
### Smoothed Model ----
starwars %>%
filter(mass < 200) %>%
ggplot(aes(height, mass, color = sex)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth() +
facet_wrap(~sex) +
theme_minimal() +
labs(title = "Height and mass by sex")
### Smoothed Model ----
starwars %>%
filter(mass < 200) %>%
ggplot(aes(height, mass, color = sex)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth() +
facet_wrap(~sex) +
theme_bw() +
labs(title = "Height and mass by sex")
warning()
warnings()
### Smoothed Model ----
starwars %>%
filter(mass < 200) %>%
ggplot(aes(height, mass, color = sex)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth() +           # draws a smooth linear model over points
facet_wrap(~sex) +        # facet wrap by sex (organize into little boxes)
theme_bw() +
labs(title = "Height and mass by sex")
warnings()
# Analyze ----
## Hypothesis Testing ----
### T-test ----
library(gapminder)
View(gapminder)
t_test_plot
gapminder %>%
filter(continent %in% c("Africa", "Europe")) %>%
t.test(lifeExp ~ continent,          # lifeExp as a function of continent
data = .,                     # . = put data explicitly at this spot??
alternative = "two.sided",    # assumed
paired = FALSE)               # assumed
### ANOVA ----
gapminder %>%
filter(year == 2007) %>%
filter(continent %in% c("Americas", "Europe", "Asia")) %>%
aov(lifeExp ~ continent, data = .) %>%
summary()
gapminder %>%
filter(year == 2007) %>%
filter(continent %in% c("Americas", "Europe", "Asia")) %>%
aov(lifeExp ~ continent, data = .) %>%
TukeyHSD()
gapminder %>%
filter(year == 2007) %>%
filter(continent %in% c("Americas", "Europe", "Asia")) %>%
aov(lifeExp ~ continent, data = .) %>%
TukeyHSD() %>%
plot()
View(flowers)
flowers <- iris %>%
mutate(Size = cut(Sepal.Length,   # new variable called Size
breaks = 3,     # 3 breaks, 3 intervals named:
labels = c("Small", "Medium", "Large"))) %>%
select(Species, Size)
View(flowers)
#### Goodness of Fit Test ----
flowers %>%
select(Size) %>%
table() %>%
chisq.test()
#### Test of Independence ----
flowers %>%
table() %>%
chisq.test()
#### Test of Independence ----
flowers %>%
table() %>%
chisq.test()
flowers %>%
table() %>%
flowers %>%
table()
flowers %>%
table()
#### Test of Independence ----
flowers %>%
table() %>%
chisq.test()
# Linear Model (Regression) ----
head(cars, 10)
cars %>%
lm(dist ~ speed, data = .) %>%
summary()
### Box Plots ----
starwars %>%
drop_na(height) %>%
ggplot(aes(height)) +               # both "mapping =" and "x =" are assumed by default
geom_boxplot(fill = "steelblue") +
theme_bw() +                        # built-in themes
labs(title = "Boxplot of height",   # labels
x = "Height of characters")
### Smoothed Model ----
starwars %>%
filter(mass < 200) %>%
ggplot(aes(height, mass, color = sex)) +
geom_point(size = 3, alpha = 0.8) +
geom_smooth() +           # draws a smooth linear model over points
facet_wrap(~sex) +        # facet wrap by sex (organize into little boxes)
theme_bw() +
labs(title = "Height and mass by sex")
source("~/.active-rstudio-document", echo=TRUE)
shiny::runApp('MRU/R Practice')
runApp('MRU/CougarStats')
runApp('MRU/R Practice')
runApp('MRU/CougarStats')
runApp('MRU/R Practice')
runApp('MRU/CougarStats')
runApp('MRU/CougarStats - Sam's Fork/CougarStats')
runApp('MRU/CougarStats - Sam's Fork/CougarStats')
shiny::runApp('MRU/CougarStats - SB/CougarStats')
runApp('MRU/CougarStats - SB/CougarStats')
shiny::runApp('MRU/CougarStats - SB/CougarStats')
